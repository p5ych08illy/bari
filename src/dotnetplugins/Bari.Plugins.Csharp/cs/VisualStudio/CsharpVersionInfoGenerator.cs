using System.IO;
using Bari.Core.Model;

namespace Bari.Plugins.Csharp.VisualStudio
{
    /// <summary>
    /// Generates a C# file containing <c>AssemblyVersion</c> and <c>AssemblyFileVersion</c> attributes,
    /// coming from the <see cref="Project"/>.
    /// </summary>
    public class CsharpVersionInfoGenerator
    {
        private readonly Project project;

        /// <summary>
        /// Initializes the version info generator
        /// </summary>
        /// <param name="project">Project to generate version info for</param>
        public CsharpVersionInfoGenerator(Project project)
        {
            this.project = project;
        }

        /// <summary>
        /// Generates the C# code to the given output
        /// </summary>
        /// <param name="output">Output text writer to be used</param>
        public void Generate(TextWriter output)
        {
            output.WriteLine("using System.Reflection;");

            output.WriteLine();

            output.WriteLine("// Version info file generated by bari for project {0}", project.Name);
            if (!string.IsNullOrWhiteSpace(project.EffectiveVersion))
            {
                output.WriteLine("[assembly: AssemblyVersion(\"{0}\")]", project.EffectiveVersion);
                output.WriteLine("[assembly: AssemblyFileVersion(\"{0}\")]", project.EffectiveVersion);
            }

            if (!string.IsNullOrWhiteSpace(project.EffectiveCopyright))
            {
                output.WriteLine("[assembly: AssemblyCopyright(\"{0}\")]", project.EffectiveCopyright);
            }

            if (!string.IsNullOrWhiteSpace(project.EffectiveCompany))
            {
                output.WriteLine("[assembly: AssemblyCompany(\"{0}\")]", project.EffectiveCompany);
            }

            if (!string.IsNullOrWhiteSpace(project.Title))
            {
                output.WriteLine("[assembly: AssemblyTitle(\"{0}\")]", project.Title);
            }
        }
    }
}